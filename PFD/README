
# **Assignment 2:** Planning for Drunks Model

**Module:** GEOG5990M Programming for Geographical Information Analysis: Core Skills

**Student ID:** 201534083


## Model summary

The model presented here is the work for Assignment 2 of the Module. The problem selected is "Planning for Drunks".

he program models the behaviour of 25 drunks heading home from the pub after drinking, with varied levels of drunkness.
- The program reads a file to create the town of map, including the pub and 25 houses
- The drunks are created and assigned a house number and a drunk level between 1 and 4 (1: least drunk, 4: very drunk)
- One by one, the drunks head home, with the randomness of their steps dependent to their drunk level
- At each step, the drunk evaluates their position to determine their status (At bar, Walking, or At home) and stops when reaching home
- All drunks start their journey home from a point within the pub

The program uses a TKinter GUI to display the results of the simulation:
- a town map with the routes taken by all drunks
- a step density map
- overwrites a text file with the step density information

## Program components
Running the model:
Execute the pfdmodel.py script to run the model. A GUI window will appear with several options in the Model menu (described delow). An additional matplotlib figure window will appear for closer inspection of the outputs of the model.

WIPWIPWIPWIPWIPWIPWIPWIPWIPWIPWIPWIPWIPWIPWIP

Running the model will display a visual representation of the environment with agents (sheep and wolves) intitialised in it, and an animation of their moving, grazing and hunting behaviours will start. Sheep will move randonmly within the 300x300 environment and eat, share and sick up a proportion of their eaten resources, based on the amount of resources eaten and position relative to other sheep. Wolves will move in a partially random circuit around the map and hunt for sheep when within hunting radius. Eaten sheep will dissapear from the environment and wolves will store hunting information. The length of time for the program to run will vary slightly depending on the initial randomised positions of the agents, but is mostly dependent on the number of iterations defined by the user (default number of iterations is 150). The model run will stop when:
- Simulation completes the number of iterations,
- All sheep are hunted,
- Maximum grazing is achieved.

The program requires to scripts to run:
- [agentbasedmodel.py](https://sanluige.github.io/agentbasedmodel.py), which is the main script from which the program is executed, and;
- [agentframework.py](https://sanluige.github.io/agentframework.py), which is the definition of the Agent class and subclasses Grazer and Predator.

Additionally, it requires two files:
- [in.txt](https://sanluige.github.io/in.txt), which contains the environment information.
- [environmentout.csv](https://sanluige.github.io/environmentout.csv), which is the file used to write the environment data out of the model when requested by the user.

Please download the files into the same local directory to run.

## Navigating the model menu


The menu allows the user to:

**Run model**: Run the model with default parameters.

**Change model parameters**: Allows the user to change the following parameters on the console:

- Number of grazers
- Number of predators
- Number of iterations of the model
- Grazers sharing neighbourhood radio
- Predator hunting neighbourhood radio

**Print agent information**: Prints the information of agents - grazers and predators - in the console.

**Print environment file**: Updates the environment state in an existing CSV file (provided above).

**Quit model**: Quits the execution of the model and closes model window.

![This is an image](https://sanluige.github.io/Model_menu.png)

## License
This projects is licensed under the GNU GENERAL PUBLIC LICENSE v3.0 or any later versions (LICENSE). Full details of the license can be found at [LICENSE](https://www.gnu.org/licenses/lgpl-3.0.md)

## Additional notes

- The code was developed to run on MacOS, so users running the program in other operating systems should alter the code (particularly matplotlib commands) to run correctly in their computer.
